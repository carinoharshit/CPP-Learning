// https://leetcode.com/problems/add-two-numbers/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
     int carry = 0;
        int sum = 0;
        ListNode* head = NULL;
        ListNode* temp = head;
		
// When both the lists are having same size

        while(l1!=NULL && l2!=NULL)
        {
		//Calculating the sum of the nodes
            sum = l1->val + l2->val + carry;
			// Set carry as 0 because carryout value is added in sum so carry will become 0
            carry = 0;
			// if sum value is >=10 then here we have to calculate the carry
            if(sum>=10)
            {
			//Calculating carryout value eg: 31/10 = 3, so carry = 3
                carry = sum/10;
			// calculating sum eg: 31%10 = 1, so sum = 1
                sum = sum % 10;
            }
	// When there is no prior node is made
            if(head==NULL)
            {
			// Creating and assigning the sum value in that node
                head = new ListNode;
                head->val = sum;
                temp = head;
            }
            else{
                temp->next = new ListNode;
                temp = temp->next;
                temp->val = sum;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
// if length of list 1 is more then list 2
        while(l1!=NULL)
        {
            sum = l1->val + carry;
            carry = 0;
            if(sum>=10)
            {
                carry = sum/10;
                sum = sum%10;
            }
            temp->next = new ListNode;
            temp = temp->next;
            temp->val = sum;
            l1 = l1->next;
        }
// if length of list 2 is more than list 1
        while(l2!=NULL)
        {
            sum = l2->val + carry;
            carry = 0;
            if(sum>=10)
            {
                carry = sum/10;
                sum = sum%10;
            }
            temp->next = new ListNode;
            temp = temp->next;
            temp->val = sum;
            l2 = l2->next;
        }
		
// if carryout value is left in the last
        if(carry)
        {
            temp->next = new ListNode;
            temp = temp->next;
            temp->val = carry;
        }

        return head;    
    }
};
